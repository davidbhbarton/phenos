
import Tkinter as tk
import numpy as np
import graphics

def get_from_clipboard():
    root=tk.Tk()
    root.withdraw()
    output=root.clipboard_get()
    root.destroy()
    return output

def copy_to_clipboard(value):
    root=tk.Tk()
    root.withdraw()
    try:
        root.clipboard_clear()
        root.clipboard_append(value)
        root.destroy()
        return True
    except:
        root.destroy()
        return False

def parse_clipboard_columns(clipboardstring,
                            linedelimiter="\n",
                            columndelimiter="\t",
                            typeconvert=[float,float]):
    output=[]
    for row in clipboardstring.split(linedelimiter):
        splitrow=row.strip().split(columndelimiter)
        if splitrow:
            if typeconvert:
                splitrow2=[]
                for c,v in zip(typeconvert,splitrow):
                    if v:
                        try:
                            splitrow2.append(c(v))
                        except Exception as e:
                            print "Couldn't convert {}({}) to {}".format(type(v).__name__,
                                                                         v,c)
                splitrow=splitrow2
            if splitrow:
                output.append(splitrow)
    return output

def splits_xys_into_x_y(list_of_xys):
    return zip(*list_of_xys)

def fit_poly(x,y):
    parameters=np.polyfit(x,y,3)
    predictedy=np.polyval(parameters,x)
    return x,predictedy

def fit_linear(x,y):
    print np.linalg.lstsq(zip(x,y),rcond=-1)
    print results
    m,c=results
    predictedy=[m*xv + c for xv in x]
    return x,predictedy

def plot_fit(x,y,fittingfunction):
    x,predictedy=fittingfunction(x,y)
    graphics.CurvePlot(timevalues=[x,x], #xvalues
                       xbounds=(0,3.5),
                       xaxislabel='x',
                       measurements=[y,predictedy], #yvalues
                       ybounds=(0,25000000),
                       yaxislabel='y',
                       xaxisscale='linear', #could be 'log' or 'symlog'
                       yaxisscale='symlog', #could be 'log' or 'symlog'
                       colorvalues=['black','red'],
                       labels=['actual','predicted'],
                       title=fittingfunction.__name__,
                       show=True,
                       savepath=None)

if __name__=="__main__":
    #print splits_xys_into_x_y(parse_clipboard_columns(get_from_clipboard()))
    x,y=[(1.731025, 1.8958, 1.926425, 1.82185, 1.793875, 1.9678, 1.9382, 1.9263, 1.733525, 1.876975, 1.796575, 1.9345, 1.8914, 1.91835, 1.75005, 1.814725, 1.7775, 1.9835, 2.031075, 1.797325, 2.034525, 1.966075, 1.66365, 1.928875, 1.8815, 1.7208, 1.933225, 1.700125, 1.92355, 1.80805, 1.79015, 2.055975, 1.948275, 2.198675, 1.99465, 2.038375, 2.076325, 2.13815, 2.153875, 2.080875, 2.279125, 2.142475, 2.283375, 2.30305, 2.348075, 2.28895, 2.312475, 2.423925, 2.33485, 2.431375, 2.266575, 2.29155, 2.413, 2.288075, 2.61695, 2.19545, 2.27015, 2.299875, 2.3926, 2.462125, 2.34275, 2.382675, 2.482625, 2.71115, 2.417225, 2.3557, 2.693, 3.0685, 2.88915, 2.924825, 2.611275, 2.91615, 2.82905, 2.5626, 2.852025, 2.61785, 2.735475, 2.71915, 3.069425, 2.7991, 2.854325, 2.95315, 2.809375, 3.096075, 3.13985, 3.031625, 2.736375, 2.676725, 3.079675, 2.92405, 3.28455, 3.094425, 3.2989, 2.749625, 0.007125, 0.006, 0.168175, 0.092525, 0.018525, 0.154475, 0.115725, 0.240025, 0.1304, 0.128425, 0.0982, 0.54215, 0.10725, 0.407, 0.775, 0.202925, 0.124425, 0.15825, 0.50845, 0.130775, 0.19195, 0.13375, 0.79975, 0.8906, 0.992525, 0.74105, 0.6932, 0.65745, 1.14315, 0.51, 0.798925, 0.56225, 0.4006, 1.14735, 0.6818, 0.942875, 1.14685, 0.715675, 1.319375, 1.1362, 1.4218, 1.49255, 1.300475, 0.974675, 1.38645, 1.488325, 1.46105, 1.349475, 1.471675, 0.914025, 1.497825, 1.373875, 1.71465, 1.55705, 1.81375, 1.725125, 1.590125, 1.693275, 1.6458, 1.457625, 1.531175, 1.639775, 1.515275, 1.58635, 1.405425, 1.451375, 1.577, 1.32565, 1.58435, 1.779, 1.5088, 1.753625, 1.5338, 1.62675, 1.38575, 1.5858, 1.291325, 1.82435, 1.63515, 1.552025, 1.674675, 1.546525, 1.70455, 1.498675, 1.476625, 1.677875, 1.44235, 1.812, 1.6103, 1.746125, 1.6671, 1.602125, 1.698075, 1.959825, 1.802975, 1.45235, 1.8305, 1.591325, 1.3997, 1.276775, 1.89095, 1.639775, 1.8586, 1.7346, 1.604725, 1.5343, 1.720275, 1.7357, 1.8034, 1.75245, 1.547925, 1.872525), (1500000.0, 1500000.0, 1560000.0, 1790000.0, 1840000.0, 2950000.0, 1300000.0, 3125000.0, 2383333.333, 1700000.0, 1850000.0, 1966666.667, 2416666.667, 2433333.333, 1510000.0, 1812500.0, 1883333.333, 1900000.0, 2350000.0, 2416666.667, 1366666.667, 1950000.0, 1970000.0, 3283333.333, 2080000.0, 2383333.333, 3000000.0, 3250000.0, 2916666.667, 2983333.333, 3100000.0, 2650000.0, 2000000.0, 2700000.0, 3750000.0, 2750000.0, 1625000.0, 2100000.0, 2550000.0, 2500000.0, 4250000.0, 4150000.0, 2325000.0, 2750000.0, 4250000.0, 4425000.0, 2750000.0, 3775000.0, 3150000.0, 2775000.0, 2700000.0, 2525000.0, 5650000.0, 3350000.0, 4650000.0, 3450000.0, 4450000.0, 3650000.0, 5950000.0, 8375000.0, 6625000.0, 13375000.0, 7100000.0, 5450000.0, 10875000.0, 12000000.0, 7250000.0, 11750000.0, 10250000.0, 15625000.0, 13625000.0, 11875000.0, 18250000.0, 10000000.0, 17000000.0, 17625000.0, 9125000.0, 9500000.0, 13500000.0, 12125000.0, 14000000.0, 14750000.0, 9625000.0, 10375000.0, 13875000.0, 14250000.0, 19000000.0, 14000000.0, 17000000.0, 17125000.0, 16750000.0, 22375000.0, 16937500.0, 19875000.0, 0.0, 0.0, 13000.0, 17000.0, 30000.0, 30000.0, 35000.0, 38000.0, 38000.0, 39000.0, 40000.0, 40000.0, 41000.0, 42000.0, 43000.0, 44000.0, 45000.0, 50000.0, 52000.0, 55000.0, 57000.0, 57000.0, 68333.33333, 118333.3333, 120000.0, 126666.6667, 135000.0, 140000.0, 150000.0, 165000.0, 177500.0, 197500.0, 200000.0, 220000.0, 222500.0, 222500.0, 240000.0, 260000.0, 260000.0, 270000.0, 280000.0, 300000.0, 340000.0, 345000.0, 360000.0, 400000.0, 400000.0, 410000.0, 410000.0, 440000.0, 450000.0, 510000.0, 520000.0, 540000.0, 570000.0, 570000.0, 580000.0, 590000.0, 600000.0, 610000.0, 610000.0, 620000.0, 630000.0, 630000.0, 630000.0, 640000.0, 640000.0, 660000.0, 670000.0, 670000.0, 700000.0, 730000.0, 740000.0, 740000.0, 740000.0, 750000.0, 750000.0, 790000.0, 800000.0, 810000.0, 850000.0, 880000.0, 890000.0, 900000.0, 910000.0, 930000.0, 1000000.0, 1020000.0, 1040000.0, 1070000.0, 1100000.0, 1160000.0, 1200000.0, 1200000.0, 1230000.0, 1310000.0, 1310000.0, 1333333.333, 1340000.0, 1340000.0, 1360000.0, 1366666.667, 1380000.0, 1440000.0, 1450000.0, 1460000.0, 1520000.0, 1525000.0, 1530000.0, 1650000.0, 1975000.0, 2500000.0)]
    x,y=zip(*sorted(zip(x,y)))
    plot_fit(x,y,fit_linear)
    